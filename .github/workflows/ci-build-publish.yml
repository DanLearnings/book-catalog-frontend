# File: .github/workflows/ci-build-publish.yml (no repositório book-catalog-frontend)

name: CI - Build and Publish Frontend Docker Image

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 1. Clona o código do repositório
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configura o Node.js para a pipeline (diferente da API, que usava setup-java)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Usando a mesma versão do nosso Dockerfile

      # 3. Instala as dependências do projeto
      #    'ci' é mais rápido e seguro para pipelines do que 'install'
      - name: Install dependencies
        run: npm ci

      # (OPCIONAL, MAS BOA PRÁTICA) - Passo para rodar testes no futuro
      # - name: Run tests
      #   run: npm test -- --no-watch --browsers=ChromeHeadless

      # 4. Faz login no GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 5. Extrai metadados da imagem
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # IMPORTANTE: Nome da imagem diferente da API
          images: ghcr.io/${{ github.repository }}

      # 6. Constrói e publica a imagem Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
